k <- 1
#Shuffle the data
x_zero <- 1
x0_running_total <- 0
sft_running_total <- 0
beds_running_total <- 0
running_err <- 0
j_theta <- vector()
for(j in 1:30)
{
set.seed <- 10
shuffle <- sample(1:l,1000,rep=TRUE)
for(i in shuffle)
{
temp <- df_std$price[i] - (theta_0 + theta_1 * df_std$sft[i] + theta_2 * df_std$beds[i])
x0_running_total <-   temp * x_zero
sft_running_total <-  temp * df_std$sft[i]
beds_running_total <- temp * df_std$beds[i]
theta_0 <- theta_0 + alpha * x0_running_total
theta_1 <- theta_1 + alpha * sft_running_total
theta_2 <- theta_2 + alpha * beds_running_total
#Getting the error in prediction
running_err <- (sum((df_std$price[i] - (theta_0+df_std$sft[i]*theta_1 + df_std$beds[i]*theta_2))^2)/2) + running_err
}
#j_theta[j] = sum((df_std$price - (as.matrix(cbind(1,df_std[,-3])) %*% matrix(rbind(theta_0,theta_1,theta_2))))^2)/(2)
j_theta[j] = running_err/1000
running_err <- 0
alpha <- alpha/j
}
return(list(j_theta=j_theta,theta_0=theta_0,theta_1=theta_1,theta_2=theta_2))
}
stochastic_gradient_descent(0.01,df_std,1)
stochastic_gradient_descent(0.01,df_std,1)
stochastic_gradient_descent <- function(alpha,df_std,rep)
{
theta_0 <- 1
theta_1 <- 1
theta_2 <- 1
l <- nrow(df_std)
k <- 1
#Shuffle the data
x_zero <- 1
x0_running_total <- 0
sft_running_total <- 0
beds_running_total <- 0
running_err <- 0
j_theta <- vector()
for(j in 1:30)
{
set.seed(10)
shuffle <- sample(1:l,1000,rep=TRUE)
for(i in shuffle)
{
temp <- df_std$price[i] - (theta_0 + theta_1 * df_std$sft[i] + theta_2 * df_std$beds[i])
x0_running_total <-   temp * x_zero
sft_running_total <-  temp * df_std$sft[i]
beds_running_total <- temp * df_std$beds[i]
theta_0 <- theta_0 + alpha * x0_running_total
theta_1 <- theta_1 + alpha * sft_running_total
theta_2 <- theta_2 + alpha * beds_running_total
#Getting the error in prediction
running_err <- (sum((df_std$price[i] - (theta_0+df_std$sft[i]*theta_1 + df_std$beds[i]*theta_2))^2)/2) + running_err
}
#j_theta[j] = sum((df_std$price - (as.matrix(cbind(1,df_std[,-3])) %*% matrix(rbind(theta_0,theta_1,theta_2))))^2)/(2)
j_theta[j] = running_err/1000
running_err <- 0
alpha <- alpha/j
}
return(list(j_theta=j_theta,theta_0=theta_0,theta_1=theta_1,theta_2=theta_2))
}
stochastic_gradient_descent(0.01,df_std,1)
stochastic_gradient_descent(0.01,df_std,1)
stochastic_gradient_descent(0.001,df_std,1)
stochastic_gradient_descent(0.1,df_std,1)
stochastic_gradient_descent(0.1/2,df_std,1)
stochastic_gradient_descent(0.1/4,df_std,1)
stochastic_gradient_descent(0.01/4,df_std,1)
stochastic_gradient_descent(0.001/4,df_std,1)
stochastic_gradient_descent(0.01/4,df_std,1)
stochastic_gradient_descent(0.01/5,df_std,1)
stochastic_gradient_descent(0.01/3,df_std,1)
stochastic_gradient_descent(0.01/2,df_std,1)
stochastic_gradient_descent(0.001/4,df_std,1)
stochastic_gradient_descent(0.01/4,df_std,1)
stochastic_gradient_descent(0.01/3,df_std,1)
0.01/3
stochastic_gradient_descent <- function(alpha,df_std)
{
theta_0 <- 1
theta_1 <- 1
theta_2 <- 1
l <- nrow(df_std)
k <- 1
#Shuffle the data
x_zero <- 1
x0_running_total <- 0
sft_running_total <- 0
beds_running_total <- 0
running_err <- 0
j_theta <- vector()
for(j in 1:30)
{
set.seed(10)
shuffle <- sample(1:l,1000,rep=TRUE)
for(i in shuffle)
{
temp <- df_std$price[i] - (theta_0 + theta_1 * df_std$sft[i] + theta_2 * df_std$beds[i])
x0_running_total <-   temp * x_zero
sft_running_total <-  temp * df_std$sft[i]
beds_running_total <- temp * df_std$beds[i]
theta_0 <- theta_0 + alpha * x0_running_total
theta_1 <- theta_1 + alpha * sft_running_total
theta_2 <- theta_2 + alpha * beds_running_total
#Getting the error in prediction
running_err <- (sum((df_std$price[i] - (theta_0+df_std$sft[i]*theta_1 + df_std$beds[i]*theta_2))^2)/2) + running_err
}
#j_theta[j] = sum((df_std$price - (as.matrix(cbind(1,df_std[,-3])) %*% matrix(rbind(theta_0,theta_1,theta_2))))^2)/(2)
j_theta[j] = running_err/1000
running_err <- 0
alpha <- alpha/j
}
return(list(j_theta=j_theta,theta_0=theta_0,theta_1=theta_1,theta_2=theta_2))
}
stochastic_gradient_descent(0.01/3,df_std,1)
stochastic_gradient_descent(0.01/3,df_std)
sg <- stochastic_gradient_descent(0.01/3,df_std,1)
sg <- stochastic_gradient_descent(0.01/3,df_std)
plot(sg$j_theta)
sg <- stochastic_gradient_descent(0.01/3,df_std)
plot(sg$j_theta,xlab="Iteration",ylab="J Theta", main="Cost function in stochastic gradient descent method")
cat("intercept = ", sg$theta_0, "    sft coefficient = ", sg$theta_1, "    beds coefficient = ", sg$theta_2)
cat("Last 5 iterations error values", sg$j_theta[26:30])
df_std[,-1:-5]
df_std[-1:-5,]
df_std[-1-5:-5-5,]
df_std[(-1-5):(-5-5),]
rep(1,45,5)
seq(1,45,5)
seq(1,45,4)
seq(0,47,5)
seq(0,5,1)
seq(1,5,1)
i<-1
j<-5
seq(i,j,1)
i <- i+5
j<- j+5
seq(i,j,1)
bg <- batch_gradient_descent(0.01,df_std[-exclude,],100)
i<-1
j<-5
i<-1
j<-5
l <- nrow(df_std)
bg <- batch_gradient_descent(0.01,df_std[-exclude,],100)
exclude <- seq(i,j,1)
bg <- batch_gradient_descent(0.01,df_std[-exclude,],100)
exclude <- -1*exclude
exclude <- seq(i,j,1)
exclude <- seq(i,j,1)
exclude <- -1*exclude
exclude
df_std[exclude,]
bg <- batch_gradient_descent(0.01,df_std[exclude,],100)
bg
include <- seq(i,j,1)
exclude <- -1*include
bg <- batch_gradient_descent(0.01,df_std[exclude,],100)
bg$theta_0+bg$theta_1*df_std[include,]$sft+bg$theta_2*df_std[include,]$beds
df_std[include,]$price - bg$theta_0+bg$theta_1*df_std[include,]$sft+bg$theta_2*df_std[include,]$beds
sum(df_std[include,]$price - bg$theta_0+bg$theta_1*df_std[include,]$sft+bg$theta_2*df_std[include,]$beds)
sum((df_std[include,]$price - bg$theta_0+bg$theta_1*df_std[include,]$sft+bg$theta_2*df_std[include,]$beds)^)/5
sum((df_std[include,]$price - bg$theta_0+bg$theta_1*df_std[include,]$sft+bg$theta_2*df_std[include,]$beds)^2)/5
i<-1
j<-5
l <- nrow(df_std)
MSE <- vector()
k <- 1
repeat{
if(j > l) break
include <- seq(i,j,1)
exclude <- -1*include
bg <- batch_gradient_descent(0.01,df_std[exclude,],100)
MSE[k] <- sum((df_std[include,]$price - bg$theta_0+bg$theta_1*df_std[include,]$sft+bg$theta_2*df_std[include,]$beds)^2)/5
cat("intercept = ", bg$theta_0, "    sft coefficient = ", bg$theta_1, "    beds coefficient = ", bg$theta_2)
cat("Last 5 iterations error values", bg$j_theta[96:100])
i <- i+5
j<- j+5
}
MSE
i<-1
j<-5
l <- nrow(df_std)
MSE <- vector()
k <- 1
repeat{
if(j > l) break
include <- seq(i,j,1)
exclude <- -1*include
bg <- batch_gradient_descent(0.01,df_std[exclude,],100)
MSE[k] <- sum((df_std[include,]$price - bg$theta_0+bg$theta_1*df_std[include,]$sft+bg$theta_2*df_std[include,]$beds)^2)/5
k<- (k+1)
cat("intercept = ", bg$theta_0, "    sft coefficient = ", bg$theta_1, "    beds coefficient = ", bg$theta_2)
cat("Last 5 iterations error values", bg$j_theta[96:100])
i <- i+5
j<- j+5
}
MSE
sd(MSE)
mean(MSE)
i<-1
j<-5
l <- nrow(df_std)
MSE <- vector()
k <- 1
repeat{
if(j > l) break
include <- seq(i,j,1)
exclude <- -1*include
bg <- batch_gradient_descent(0.01,df_std[exclude,],100)
MSE[k] <- sum((df_std[include,]$price - bg$theta_0+bg$theta_1*df_std[include,]$sft+bg$theta_2*df_std[include,]$beds)^2)/5
k<- (k+1)
print(cat("intercept = ", bg$theta_0, "    sft coefficient = ", bg$theta_1, "    beds coefficient = ", bg$theta_2))
print(cat("Last 5 iterations error values", bg$j_theta[96:100]))
i <- i+5
j<- j+5
}
cat("intercept = ", bg$theta_0, "    sft coefficient = ", bg$theta_1, "    beds coefficient = ", bg$theta_2)
?predict
lm <- lm(data=df_std[exclude,],price~(sft+beds))
lm
predict(lm,df_std[include])
predict(lm,df_std[include])
include
df_std[include]
predict(lm,df_std[include,])
sum((df_std[include,]$price - predict(lm,df_std[include,]))^2)/5
MSE
i<-1
j<-5
l <- nrow(df_std)
MSE <- vector()
k <- 1
repeat{
if(j > l) break
include <- seq(i,j,1)
exclude <- -1*include
#bg <- batch_gradient_descent(0.01,df_std[exclude,],100)
lm <- lm(data=df_std[exclude,],price~(sft+beds))
MSE[k] <- sum((df_std[include,]$price - (bg$theta_0+bg$theta_1*df_std[include,]$sft+bg$theta_2*df_std[include,]$beds))^2)/5
k<- (k+1)
print(cat("intercept = ", bg$theta_0, "    sft coefficient = ", bg$theta_1, "    beds coefficient = ", bg$theta_2))
print(cat("Last 5 iterations error values", bg$j_theta[96:100]))
sum((df_std[include,]$price - predict(lm,df_std[include,]))^2)/5
i <- i+5
j<- j+5
}
MSE
sum((df_std[include,]$price - predict(lm,df_std[include,]))^2)/5
mean(MSE)
sd(MSE)
cv.err10 = rep(0,10)
for (i in 1:12){
#set.seed(10)
glm.fit = glm(price~poly(sft + beds ,i),data=df_std)
cv.err10[i]=cv.glm(df,glm.fit,K=5)$delta[1]
}
library("boot")
cv.err10 = rep(0,10)
for (i in 1:12){
#set.seed(10)
glm.fit = glm(price~poly(sft + beds ,i),data=df_std)
cv.err10[i]=cv.glm(df,glm.fit,K=5)$delta[1]
}
cv.err10
cv.err10 = rep(0,10)
for (i in 1:12){
#set.seed(10)
glm.fit = glm(price~poly(sft + beds ,i),data=df_std)
cv.err10[i]=cv.glm(df_std,glm.fit,K=5)$delta[1]
}
cv.err10
MSE
glm(price~poly(sft + beds ,i),data=df_std[exclude,])
glm(price~poly(sft + beds ,1),data=df_std[exclude,])
cv.err10 = rep(0,10)
for (i in 1:12){
#set.seed(10)
glm.fit = glm(price~poly(sft + beds ,i),data=df_std)
cv.err10[i]=cv.glm(df_std,glm.fit,K=5)$delta[1]
}
degree=1:12
plot(degree,cv.err10,type='b',xlab = "Polynomial Degree", ylab = "Cross validation error", main = "Optimal polynomial degree selection")
library("boot")
cv.err10 = rep(0,10)
for (i in 1:12){
#set.seed(10)
glm.fit = glm(price~poly(sft + beds ,i),data=df_std)
cv.err10[i]=cv.glm(df_std,glm.fit,K=5)$delta[1]
}
degree=1:12
plot(degree,cv.err10,type='b',xlab = "Polynomial Degree", ylab = "Cross validation error", main = "Optimal polynomial degree selection")
plot(MSE)
?plot
plot(MSE,type="l")
boxplot(MSE)
plot(MSE,type="l")
boxplot(MSE)
plot(MSE,type="l")
boxplot(MSE)
mean(MSE)
sd(MSE)
IQR(MSE)
MSE
sort(MSE)
MSE <-sort(MSE)
MSE
MSE[-9]
sd(MSE[-9])
mean(MSE[-9])
mean(MSE[-length(MSE)])
sd(MSE[-length(MSE)])
i<-1
j<-5
l <- nrow(df_std)
MSE <- vector()
k <- 1
repeat{
if(j > l) break
include <- seq(i,j,1)
exclude <- -1*include
bg <- batch_gradient_descent(0.01,df_std[exclude,],100)
#lm <- lm(data=df_std[exclude,],price~(sft+beds))
MSE[k] <- sum((df_std[include,]$price - (bg$theta_0+bg$theta_1*df_std[include,]$sft+bg$theta_2*df_std[include,]$beds))^2)/5
k<- (k+1)
print(cat("intercept = ", bg$theta_0, "    sft coefficient = ", bg$theta_1, "    beds coefficient = ", bg$theta_2))
print(cat("Last 5 iterations error values", bg$j_theta[96:100]))
sum((df_std[include,]$price - predict(lm,df_std[include,]))^2)/5
i <- i+5
j<- j+5
}
sg <- stochastic_gradient_descent(0.01,df_std[exclude,])
sg
i<-1
j<-5
l <- nrow(df_std)
MSE <- vector()
k <- 1
repeat{
if(j > l) break
include <- seq(i,j,1)
exclude <- -1*include
sg <- stochastic_gradient_descent(0.01,df_std[exclude,])
MSE[k] <- sum((df_std[include,]$price - (sg$theta_0+sg$theta_1*df_std[include,]$sft+sg$theta_2*df_std[include,]$beds))^2)/5
k<- (k+1)
print(cat("intercept = ", sg$theta_0, "    sft coefficient = ", sg$theta_1, "    beds coefficient = ", sg$theta_2))
print(cat("Last 5 iterations error values", sg$j_theta[96:100]))
sum((df_std[include,]$price - predict(lm,df_std[include,]))^2)/5
i <- i+5
j<- j+5
}
MSE
MSE <- sort(MSE)
mean(MSE[-length(MSE)])
sd(MSE[-length(MSE)])
i<-1
j<-5
l <- nrow(df_std)
MSE_batch <- vector()
k <- 1
repeat{
if(j > l) break
include <- seq(i,j,1)
exclude <- -1*include
bg <- batch_gradient_descent(0.01,df_std[exclude,],100)
#lm <- lm(data=df_std[exclude,],price~(sft+beds))
MSE_batch[k] <- sum((df_std[include,]$price - (bg$theta_0+bg$theta_1*df_std[include,]$sft+bg$theta_2*df_std[include,]$beds))^2)/5
k<- (k+1)
#print(cat("intercept = ", bg$theta_0, "    sft coefficient = ", bg$theta_1, "    beds coefficient = ", bg$theta_2))
#print(cat("Last 5 iterations error values", bg$j_theta[96:100]))
sum((df_std[include,]$price - predict(lm,df_std[include,]))^2)/5
i <- i+5
j<- j+5
}
plot(MSE,type="l")
boxplot(MSE_batch)
mean(MSE_batch)
sd(MSE_batch)
IQR(MSE_batch)
plot(MSE,type="l")
plot(MSE_batch,type="l")
boxplot(MSE_batch)
mean(MSE_batch)
sd(MSE_batch)
IQR(MSE_batch)
MSE_batch <- sort(MSE_batch)
mean(MSE_batch[-length(MSE_batch)])
sd(MSE_batch[-length(MSE_batch)])
MSE_batch
i<-1
j<-5
l <- nrow(df_std)
MSE_sto <- vector()
k <- 1
repeat{
if(j > l) break
include <- seq(i,j,1)
exclude <- -1*include
sg <- stochastic_gradient_descent(0.01,df_std[exclude,])
MSE_sto[k] <- sum((df_std[include,]$price - (sg$theta_0+sg$theta_1*df_std[include,]$sft+sg$theta_2*df_std[include,]$beds))^2)/5
k<- (k+1)
print(cat("intercept = ", sg$theta_0, "    sft coefficient = ", sg$theta_1, "    beds coefficient = ", sg$theta_2))
print(cat("Last 5 iterations error values", sg$j_theta[96:100]))
i <- i+5
j<- j+5
}
plot(MSE_sto,type="l")
boxplot(MSE_sto)
mean(MSE_sto)
sd(MSE_sto)
IQR(MSE_sto)
plot(MSE_sto,type="l")
boxplot(MSE_sto)
mean(MSE_sto)
sd(MSE_sto)
IQR(MSE_sto)
MSE_batch <- sort(MSE_batch)
mean(MSE_batch[-length(MSE_batch)])
sd(MSE_batch[-length(MSE_batch)])
plot(MSE_batch,type="l",col="r")
plot(MSE_batch,type="l",col="red")
plot(MSE_sto,type="l",col="blue")
plot(MSE_batch,type="l",col="red")
par(new=TRUE)
plot(MSE_sto,type="l",col="blue")
i<-1
j<-5
l <- nrow(df_std)
MSE_sto <- vector()
k <- 1
repeat{
if(j > l) break
include <- seq(i,j,1)
exclude <- -1*include
sg <- stochastic_gradient_descent(0.01,df_std[exclude,])
MSE_sto[k] <- sum((df_std[include,]$price - (sg$theta_0+sg$theta_1*df_std[include,]$sft+sg$theta_2*df_std[include,]$beds))^2)/5
k<- (k+1)
print(cat("intercept = ", sg$theta_0, "    sft coefficient = ", sg$theta_1, "    beds coefficient = ", sg$theta_2))
print(cat("Last 5 iterations error values", sg$j_theta[96:100]))
i <- i+5
j<- j+5
}
i<-1
j<-5
l <- nrow(df_std)
MSE_batch <- vector()
k <- 1
repeat{
if(j > l) break
include <- seq(i,j,1)
exclude <- -1*include
bg <- batch_gradient_descent(0.01,df_std[exclude,],100)
#lm <- lm(data=df_std[exclude,],price~(sft+beds))
MSE_batch[k] <- sum((df_std[include,]$price - (bg$theta_0+bg$theta_1*df_std[include,]$sft+bg$theta_2*df_std[include,]$beds))^2)/5
k<- (k+1)
#print(cat("intercept = ", bg$theta_0, "    sft coefficient = ", bg$theta_1, "    beds coefficient = ", bg$theta_2))
#print(cat("Last 5 iterations error values", bg$j_theta[96:100]))
sum((df_std[include,]$price - predict(lm,df_std[include,]))^2)/5
i <- i+5
j<- j+5
}
plot(MSE_batch,type="l",col="red")
par(new=TRUE)
plot(MSE_sto,type="l",col="blue")
plot(MSE_sto,type="l")
boxplot(MSE_sto)
mean(MSE_sto)
sd(MSE_sto)
IQR(MSE_sto)
MSE_sto_sorted <- sort(MSE_sto)
mean(MSE_sto_sorted[-length(MSE_sto_sorted)])
sd(MSE_sto_sorted[-length(MSE_sto_sorted)])
MSE_sto_sorted
plot(MSE_batch,type="l",col="red")
plot(MSE_sto,type="l",col="blue")
plot(MSE_batch,type="l",col="red")
par(new=TRUE)
plot(MSE_sto,type="l",col="blue")
plot(MSE_batch,type="l",col="red",ylab="MSE",xlab="CV Iteration")
par(new=TRUE)
plot(MSE_sto,type="l",col="blue",ylab="MSE",xlab="CV Iteration")
plot(MSE_batch,type="l",col="red",ylab="MSE",xlab="CV Iteration")
par(new=TRUE)
plot(MSE_sto,type="l",col="blue",ylab="MSE",xlab="CV Iteration")
legend('topright', c('Batch MSE', 'Stochastic MSE'),lty=1,col=c("red","blue"),bty='n',cex=.75)
plot(MSE_batch,type="l",col="red",ylab="MSE",xlab="CV Iteration",main="Batch MSE and Stochastic MSE comparision")
par(new=TRUE)
plot(MSE_sto,type="l",col="blue",ylab="MSE",xlab="CV Iteration")
legend('topright', c('Batch MSE', 'Stochastic MSE'),lty=1,col=c("red","blue"),bty='n',cex=.75)
a <- matrix(c(1,-1,3,-5,2,1,5,-9,6,-1,-2,4),byrow=T, nrow = 3)
eig(a)
a <- matrix(c(5,0,3,0,1,-2,1,2,0),byrow=T, nrow = 3)
eigen(a)
MSE_batch_sorted <- sort(MSE_batch)
mean(MSE_batch_sorted[-length(MSE_batch_sorted)])
sd(MSE_batch_sorted[-length(MSE_batch_sorted)])
MSE_batch_sorted
mean(
mean(MSE_sto)
mean(MSE_sto_sorted[-length(MSE_sto_sorted)])
MSE_sto_sorted
0.01/3
